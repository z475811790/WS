<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context.xsd  
    http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans.xsd  
    http://www.springframework.org/schema/tx  
    http://www.springframework.org/schema/tx/spring-tx.xsd  
    http://www.springframework.org/schema/jdbc  
    http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd  
    http://www.springframework.org/schema/cache  
    http://www.springframework.org/schema/cache/spring-cache-3.1.xsd  
    http://www.springframework.org/schema/aop  
    http://www.springframework.org/schema/aop/spring-aop.xsd  
    http://www.springframework.org/schema/util  
    http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- 自动扫描 -->
	<context:component-scan base-package="service,action" />
	<!-- 引入外置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>

	<!--数据库连接池配置 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

	<!-- spring和MyBatis完美整合 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 具体指定xml文件，可不配 -->
		<property name="configLocation" value="classpath:mybatis.cfg.xml" />
	</bean>

	<!-- 创建数据映射器，数据映射器必须为接口 这种配置方式有个缺点，有多少个dao接口就要配置多少个数据映射器， -->
	<!-- 增加了开发时间 可用MapperScannerConfigurer代替，能够完全解决问题 -->
	<!-- <bean id="studentMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> -->
	<!-- <propertynamepropertyname = mapperInterface " value="com.hys.app.student.dao.StudentDao" /> -->
	<!-- <propertynamepropertyname = sqlSessionFactory " ref="sqlSessionFactory" /> -->
	<!-- </bean> -->
	<!-- 自动扫描com/hys/app/**/dao下的所有dao接口，并实现这些接口，可直接在程序中使用dao接口，不用再获取sqlsession对象 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- basePackage 属性是映射器接口文件的包路径。 你可以使用分号或逗号作为分隔符设置多于一个的包路径 -->
		<property name="basePackage" value="dao" />
		<!-- 因为会自动装配 SqlSessionFactory和SqlSessionTemplate 所以没 有 必 要去 指 定 SqlSessionFactory或SqlSessionTemplate 因此可省略不配置； 但是,如果你使 
			用了一个 以上的 DataSource，那么自动装配可能会失效。 这种 情况下，你可以使用sqlSessionFactoryBeanName或sqlSessionTemplateBeanName属性来设置正确的 bean名称来使用； -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
</beans>  